######
第一步
######

****************
使用命令行解释器
****************

你没有看错，GHC 除了可以将 Hasekll 源码编译为二进制执行（这一点与 C/C++ 没有什么区别），也自带一个解释执行的模式，在这里你可以快速的测试你的代码，或者处理一些简单的工作，甚至把 Haskell 当作计算器来使用。

如果你在上一章的安装中没有出错，只要在终端中输入 ghci，并按下回车，就应该看到如下提示：

.. code::

   GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
   Prelude>

这时只要在屏幕上输入（注意区分大小写）：

.. code:: haskell

   putStrLn "Hello, world!"

并按下回车，我们应该得到如下输出：

.. code::
   
   Prelude> putStrLn "Hello, world!"
   Hello, world!
   Prelude>

退出解释器
==========

如果是在 Linux 或者 macOS 操作系统下，只需要按下 ctrl + d 组合键，即可退出命令行解释器。

**********
编译二进制
**********

我们还可以将 Haskell 源码编译为操作系统原生的二进制并执行。

新建一个名为 hello.hs 的文件，并使用你最顺手的纯文本编辑器打开，比如 vim，并输入如下内容：

.. code:: haskell

   main = putStrLn "Hello, world!"

然后在同一目录下执行：

.. code:: sh

   ghc hello.hs

如果没有问题的话，可以在目录下看到多出来几个 hello 前缀的文件，其中 hello 这个可执行文件就是编译出来的结果。可以尝试执行一下：

.. code:: sh

   $ ./hello

如预期，屏幕应该输出 ``Hello, world!`` 字样。

******************
编译模式与解释模式
******************

通过上面的例子可以看出，与 Python 不一样的是，GHC 的编译模式和解释模式有些许不同。后续章节会解释这些不同之处，不过目前只需要了解，在 GHC 的编译模式和解释模式中，我们没有办法简单的复制一份完整的代码到另外一个之上，并期望它可以正确执行。

不过不要怕，它们的差异是很小的，并且可以通过简单的修改就可以互相转换。
